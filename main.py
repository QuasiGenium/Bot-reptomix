from telegram.ext import Updater, MessageHandler, Filters, ConversationHandler
from telegram.ext import CommandHandler
from flask import Flask
from flask_restful import Api
from data import db_session
from data.users import User
from telegram import ReplyKeyboardMarkup
from parser import parse_types, all_of_type, sort_between_prices
app = Flask(__name__)
app.config['SECRET_KEY'] = 'kkkk'
api = Api(app, catch_all_404s=True)
TOKEN = open('token.txt', 'r').readline()


def new_user(telegram_id):
    user = User()
    user.telegram_id = telegram_id
    db_sess = db_session.create_session()
    db_sess.add(user)
    db_sess.commit()


def change_user(telegram_id, typ='', mi=0):
    db_sess = db_session.create_session()
    user = db_sess.query(User).filter(User.telegram_id == telegram_id).first()
    try:
        user.type = typ if typ else user.type
        user.min_price = mi if mi else user.min_price
        db_sess.add(user)
        db_sess.commit()
        return True
    except Exception as e:
        print(e)
        return False


def start(update, context):
    chat = update.effective_chat
    if not db_session.create_session().query(User).filter(User.telegram_id == chat.id).first():
        new_user(chat.id)
    reply_keyboard = [['/filter', '/help']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç —Å–∞–π—Ç–∞ https://reptomix.com/ \n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /filter –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º", reply_markup=markup)


def help_(update, context):
    update.message.reply_text(
        "–î–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /filter, "
        "–ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ë–æ—Ç –≤—ã–¥–∞—Å—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")


def filt(update, context):
    chat = update.effective_chat
    js = parse_types()
    a, b = js['type'].keys(), js['subtype'].keys()
    a = '\n'.join(a)
    b = '\n'.join(b)
    update.message.reply_text(
        f"–ö–∞–∫–æ–π —Ç–∏–ø –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞?\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{a}\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{b}"
        f"\n(–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop )")
    return 1


def first_response(update, context):
    chat = update.effective_chat
    type_ = update.message.text.strip()
    js = parse_types()
    if type_.lower() in list(map(lambda x: x.lower(), js['type'].keys())) or type_.lower() in\
            list(map(lambda x: x.lower(), js['subtype'].keys())):
        change_user(chat.id, typ=type_)
        a = min(list(map(lambda x: x['price'], all_of_type(type_, js))))
        update.message.reply_text(
            f"–ö–∞–∫–∞—è –º–∏–Ω–∏–º–∏–∞–ª—å–Ω–∞—è –∂–µ–ª–∞–µ–º–∞—è –≤–∞–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å? (–°–∞–º—ã–π –¥–µ—à—ë–≤—ã–π —Å—Ä–µ–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - {a})")
        return 2
    else:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ\n"
                                  "–ö–∞–∫–æ–π —Ç–∏–ø –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞?")
        return 1


def second_response(update, context):
    chat = update.effective_chat
    min_ = update.message.text.strip()
    try:
        change_user(chat.id, mi=int(min_))
    except Exception as e:
        print(e)
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ\n"
                                  "–ö–∞–∫–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∂–µ–ª–∞–µ–º–∞—è –≤–∞–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å?")
        return 2
    a = max(list(map(lambda x: x['price'],
                     all_of_type(db_session.create_session().query(User).filter(User.telegram_id
                                                                                ==
                                                                                chat.id).first().type, parse_types()))))
    update.message.reply_text(f"–ö–∞–∫–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∂–µ–ª–∞–µ–º–∞—è –≤–∞–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å?"
                              f" (–°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π —Å—Ä–µ–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - {a})")
    return 3


def third_response(update, context):
    chat = update.effective_chat
    max_ = update.message.text.strip()
    try:
        max_ = int(max_)
    except Exception as e:
        print(e)
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ\n"
                                  "–ö–∞–∫–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∂–µ–ª–∞–µ–º–∞—è –≤–∞–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å?")
        return 3
    user = db_session.create_session().query(User).filter(User.telegram_id == chat.id).first()
    ba = sort_between_prices(all_of_type(user.type), user.min_price, max_)
    if ba:
        update.message.reply_text(ba)
    else:
        update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüôÅ.'
                                  ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ –∫–æ–º–∞–Ω–¥–µ /filter')
    return ConversationHandler.END


def stop(update, context):
    update.message.reply_text("–ó–∞–ø—Ä–æ—Å –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


def main():
    db_session.global_init("db/users.db")
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('filter', filt)],
        states={

            1: [MessageHandler(Filters.text & ~Filters.command, first_response)],

            2: [MessageHandler(Filters.text & ~Filters.command, second_response)],

            3: [MessageHandler(Filters.text & ~Filters.command, third_response)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    dp.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
